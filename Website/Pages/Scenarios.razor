@page "/scenarios"
@using RetirementPlanner.Models
@using RetirementPlanner.Services
@inject IScenarioService ScenarioService

<h1 class="text-2xl font-bold mb-4">Scenarios</h1>

<button class="px-4 py-2 mb-2 bg-blue-600 text-white rounded" @onclick="OpenAddModal">Add Scenario</button>

@if (_scenarios is null)
{
    <p>Loading...</p>
}
else if (_scenarios.Count == 0)
{
    <p>No scenarios defined.</p>
}
else
{
    <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
            <tr>
                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
            @foreach (var scenario in _scenarios)
            {
                <tr>
                    <td class="px-3 py-2">@scenario.Name</td>
                    <td class="px-3 py-2 text-right space-x-2">
                        <button class="text-blue-500" @onclick="() => OpenEditModal(scenario)">Edit</button>
                        <button class="text-red-500" @onclick="() => DeleteScenario(scenario.Id)">Delete</button>
                        <button class="text-green-600" @onclick="() => OpenCloneModal(scenario.Id)">Clone Investments</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (IsModalOpen)
{
    <div class="fixed inset-0 backdrop-blur-sm bg-white/50 flex items-center justify-center">
        <div class="bg-white p-4 rounded shadow w-full max-w-md">
            <h2 class="text-xl font-bold mb-2">@(_editingScenario.Id == 0 ? "Add" : "Edit") Scenario</h2>
            <EditForm Model="_editingScenario" OnValidSubmit="SaveScenario">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-2">
                    <label class="form-label">Name</label>
                    <InputText class="form-input" @bind-Value="_editingScenario.Name" />
                </div>
                <div class="flex justify-end space-x-2">
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">Save</button>
                    <button type="button" class="px-4 py-2 bg-gray-300 rounded" @onclick="CloseModal">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (IsCloneModalOpen && _scenarios != null)
{
    <div class="fixed inset-0 backdrop-blur-sm bg-white/50 flex items-center justify-center">
        <div class="bg-white p-4 rounded shadow w-full max-w-md">
            <h2 class="text-xl font-bold mb-2">Clone Investments</h2>
            <div class="mb-2">
                <label class="form-label">Clone from scenario</label>
                <InputSelect class="form-input" @bind-Value="_selectedSourceScenarioId">
                    @foreach (var sc in _scenarios.Where(s => s.Id != _cloneTargetScenarioId))
                    {
                        <option value="@sc.Id">@sc.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="flex justify-end space-x-2">
                <button class="px-4 py-2 bg-blue-600 text-white rounded" @onclick="CloneInvestments">Clone</button>
                <button class="px-4 py-2 bg-gray-300 rounded" @onclick="CloseCloneModal">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Scenario>? _scenarios;
    private Scenario _editingScenario = new();
    private bool IsModalOpen;
    private bool IsCloneModalOpen;
    private int _cloneTargetScenarioId;
    private int _selectedSourceScenarioId;

    protected override async Task OnInitializedAsync()
    {
        await LoadScenarios();
    }

    private async Task LoadScenarios()
    {
        _scenarios = await ScenarioService.GetAllAsync();
    }

    private void OpenAddModal()
    {
        _editingScenario = new Scenario();
        IsModalOpen = true;
    }

    private void OpenEditModal(Scenario scenario)
    {
        _editingScenario = new Scenario
        {
            Id = scenario.Id,
            Name = scenario.Name
        };
        IsModalOpen = true;
    }

    private async Task SaveScenario()
    {
        if (_editingScenario.Id == 0)
        {
            await ScenarioService.AddAsync(_editingScenario);
        }
        else
        {
            await ScenarioService.UpdateAsync(_editingScenario);
        }

        await LoadScenarios();
        CloseModal();
    }

    private async Task DeleteScenario(int id)
    {
        await ScenarioService.DeleteAsync(id);
        await LoadScenarios();
    }

    private void OpenCloneModal(int targetScenarioId)
    {
        _cloneTargetScenarioId = targetScenarioId;
        _selectedSourceScenarioId = _scenarios?.FirstOrDefault(s => s.Id != targetScenarioId)?.Id ?? 0;
        IsCloneModalOpen = true;
    }

    private async Task CloneInvestments()
    {
        if (_selectedSourceScenarioId > 0)
        {
            await ScenarioService.CloneInvestmentsAsync(_selectedSourceScenarioId, _cloneTargetScenarioId);
        }
        CloseCloneModal();
        await LoadScenarios();
    }

    private void CloseModal() => IsModalOpen = false;
    private void CloseCloneModal() => IsCloneModalOpen = false;
}
