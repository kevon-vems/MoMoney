@page "/expenses"
@using RetirementPlanner.Models
@using RetirementPlanner.Services
@inject IExpenseService ExpenseService

<div class="mb-6 p-4 bg-gray-100 rounded">
    <h2 class="text-xl font-semibold mb-2">About Expenses</h2>
    <p class="mb-2 text-gray-700">
        The Expenses section allows you to track and manage your annual spending categories. Each expense entry represents a recurring or one-time cost, such as housing, healthcare, or entertainment, that impacts your financial plan.
    </p>
    <ul class="list-disc pl-6 mb-2 text-gray-800">
        <li><strong>Category:</strong> The name/type of the expense (e.g., "Rent", "Groceries", "Insurance").</li>
        <li><strong>Annual Amount:</strong> The yearly cost of the expense.</li>
        <li><strong>Is Healthcare:</strong> Marks if the expense is healthcare-related.</li>
        <li><strong>Start Year:</strong> The year the expense begins.</li>
        <li><strong>End Year:</strong> (Optional) The year the expense ends.</li>
        <li><strong>Notes:</strong> Any additional information about the expense.</li>
    </ul>
    <h3 class="text-lg font-medium mb-1">How to Configure Expenses</h3>
    <ol class="list-decimal pl-6 mb-2 text-gray-700">
        <li>Click the <strong>Add Expense</strong> button. Fill in the category, annual amount, and other details.</li>
        <li>If the expense is healthcare-related, check the box (if available).</li>
        <li>Specify the start and end years if the expense is not ongoing.</li>
        <li>Add notes for clarification.</li>
        <li>Click <strong>Edit</strong> next to an expense to update its details.</li>
        <li>Click <strong>Delete</strong> to remove an expense.</li>
    </ol>
    <p class="text-gray-600">
        Accurately listing your expenses helps the application simulate your financial future, calculate budgets, and plan for savings or investments. Update your expenses regularly to reflect changes in your lifestyle or financial obligations.
    </p>
</div>

<h1 class="text-2xl font-bold mb-4">Expenses</h1>
<button class="px-4 py-2 mb-2 bg-blue-600 text-white rounded" @onclick="OpenAddModal">Add Expense</button>

@if (_expenses is null)
{
    <p>Loading...</p>
}
else if (_expenses.Count == 0)
{
    <p>No expenses defined.</p>
}
else
{
    <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
            <tr>
                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                <th></th>
            </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
            @foreach (var expense in _expenses)
            {
                <tr>
                    <td class="px-3 py-2">@expense.Category</td>
                    <td class="px-3 py-2">@expense.AnnualAmount.ToString("C")</td>
                    <td class="px-3 py-2 text-right">
                        <button class="text-blue-500 mr-2" @onclick="() => OpenEditModal(expense)">Edit</button>
                        <button class="text-red-500" @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (IsModalOpen)
{
    <div class="fixed inset-0 backdrop-blur-sm bg-white/50 flex items-center justify-center">
        <div class="bg-white p-4 rounded shadow w-full max-w-md">
            <h2 class="text-xl font-bold mb-2">@(_editingExpense.Id == 0 ? "Add" : "Edit") Expense</h2>
            <EditForm Model="_editingExpense" OnValidSubmit="SaveExpense">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-2">
                    <label class="form-label"><span class="info-icon" title="Expense category">ⓘ</span> Category</label>
                    <InputText class="form-input" @bind-Value="_editingExpense.Category" />
                </div>
                <div class="mb-2">
                    <label class="form-label"><span class="info-icon" title="Annual expense amount">ⓘ</span> Amount</label>
                    <div class="currency-wrapper">
                        <InputNumber class="form-input" @bind-Value="_editingExpense.AnnualAmount" />
                    </div>
                </div>
                <div class="mb-2">
                    <label class="inline-flex items-center">
                        <InputCheckbox class="mr-2" @bind-Value="_editingExpense.IsHealthcare" />
                        <span>Is Healthcare</span>
                    </label>
                </div>
                <div class="mb-2">
                    <label class="form-label"><span class="info-icon" title="Year the expense begins">ⓘ</span> Start Year</label>
                    <InputNumber class="form-input" @bind-Value="_editingExpense.StartYear" />
                </div>
                <div class="mb-2">
                    <label class="form-label"><span class="info-icon" title="Year the expense ends">ⓘ</span> End Year</label>
                    <InputNumber class="form-input" @bind-Value="_editingExpense.EndYear" />
                </div>
                <div class="mb-2">
                    <label class="form-label"><span class="info-icon" title="Additional notes">ⓘ</span> Notes</label>
                    <InputText class="form-input" @bind-Value="_editingExpense.Notes" />
                </div>
                <div class="flex justify-end space-x-2">
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">Save</button>
                    <button type="button" class="px-4 py-2 bg-gray-300 rounded" @onclick="CloseModal">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<Expense>? _expenses;
    private Expense _editingExpense = new();
    private bool IsModalOpen;

    protected override async Task OnInitializedAsync()
    {
        await LoadExpenses();
    }

    private async Task LoadExpenses()
    {
        _expenses = await ExpenseService.GetAllAsync();
    }

    private void OpenAddModal()
    {
        _editingExpense = new Expense { StartYear = DateTime.Now.Year };
        IsModalOpen = true;
    }

    private void OpenEditModal(Expense expense)
    {
        _editingExpense = new Expense
        {
            Id = expense.Id,
            Category = expense.Category,
            AnnualAmount = expense.AnnualAmount,
            IsHealthcare = expense.IsHealthcare,
            StartYear = expense.StartYear,
            EndYear = expense.EndYear,
            Notes = expense.Notes
        };
        IsModalOpen = true;
    }

    private async Task SaveExpense()
    {
        if (_editingExpense.Id == 0)
        {
            await ExpenseService.AddAsync(_editingExpense);
        }
        else
        {
            await ExpenseService.UpdateAsync(_editingExpense);
        }

        await LoadExpenses();
        CloseModal();
    }

    private async Task DeleteExpense(int id)
    {
        await ExpenseService.DeleteAsync(id);
        await LoadExpenses();
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }
}
