@page "/surplusallocations"
@using RetirementPlanner.Models
@using RetirementPlanner.Services
@inject ISurplusAllocationService SurplusAllocationService

<h1 class="text-2xl font-bold mb-4">Surplus Allocations</h1>
<button class="px-4 py-2 mb-2 bg-blue-600 text-white rounded" @onclick="OpenAddModal">Add Allocation</button>

@if (_allocations is null)
{
    <p>Loading...</p>
}
else if (_allocations.Count == 0)
{
    <p>No surplus allocations defined.</p>
}
else
{
    <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
            <tr>
                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Investment</th>
                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Percentage</th>
                <th></th>
            </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
            @foreach (var alloc in _allocations)
            {
                <tr>
                    <td class="px-3 py-2">@alloc.InvestmentId</td>
                    <td class="px-3 py-2">@alloc.AllocationPercentage</td>
                    <td class="px-3 py-2 text-right">
                        <button class="text-blue-500 mr-2" @onclick="() => OpenEditModal(alloc)">Edit</button>
                        <button class="text-red-500" @onclick="() => DeleteAllocation(alloc.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (IsModalOpen)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-4 rounded shadow w-full max-w-md">
            <h2 class="text-xl font-bold mb-2">@(_editingAllocation.Id == 0 ? "Add" : "Edit") Allocation</h2>
            <EditForm Model="_editingAllocation" OnValidSubmit="SaveAllocation">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-2">
                    <label class="block text-sm font-medium">Investment Id</label>
                    <InputNumber class="border rounded w-full" @bind-Value="_editingAllocation.InvestmentId" />
                </div>
                <div class="mb-2">
                    <label class="block text-sm font-medium">Percentage</label>
                    <InputNumber class="border rounded w-full" @bind-Value="_editingAllocation.AllocationPercentage" />
                </div>
                <div class="flex justify-end space-x-2">
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">Save</button>
                    <button type="button" class="px-4 py-2 bg-gray-300 rounded" @onclick="CloseModal">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<SurplusAllocationConfig>? _allocations;
    private SurplusAllocationConfig _editingAllocation = new();
    private bool IsModalOpen;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllocations();
    }

    private async Task LoadAllocations()
    {
        _allocations = await SurplusAllocationService.GetAllAsync();
    }

    private void OpenAddModal()
    {
        _editingAllocation = new SurplusAllocationConfig();
        IsModalOpen = true;
    }

    private void OpenEditModal(SurplusAllocationConfig alloc)
    {
        _editingAllocation = new SurplusAllocationConfig
        {
            Id = alloc.Id,
            InvestmentId = alloc.InvestmentId,
            AllocationPercentage = alloc.AllocationPercentage
        };
        IsModalOpen = true;
    }

    private async Task SaveAllocation()
    {
        if (_editingAllocation.Id == 0)
        {
            await SurplusAllocationService.AddAsync(_editingAllocation);
        }
        else
        {
            await SurplusAllocationService.UpdateAsync(_editingAllocation);
        }

        await LoadAllocations();
        CloseModal();
    }

    private async Task DeleteAllocation(int id)
    {
        await SurplusAllocationService.DeleteAsync(id);
        await LoadAllocations();
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }
}
